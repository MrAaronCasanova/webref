<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="css/materialize.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="css/style.css">
  <title>CASY'S TOOLBOX</title>
</head>
<body>

<div class="container">

  <h1 class="center-align">
    Casy's Toolbox
  </h1>

  <div id="references">
  <!-- Buttons below are in conjuction with list.js -->
  <!-- class="search" automagically makes an input a search field. -->
    <input class="search" placeholder="Search" />
  <!-- class="sort" automagically makes an element a sort buttons. The date-sort value decides what to sort by. -->
    <button class="sort" data-sort="html">
      HTML
    </button>
    <button class="sort" data-sort="css">
      CSS
    </button>
    <button class="sort" data-sort="javascript">
      Javascript
    </button>
    <button class="sort" data-sort="workflow">
      Workflow
    </button>

<!-- Child elements of container with class="html, css, or javascript" becomes list items -->
    <ul class="list collapsible popout" data-collapsible="accordion">
<!-- The innerHTML of children with class="html, css, or javascript" becomes this items "name" value -->
<!-- ********************************************
NOTE HTML
********************************************* -->
      <li>
        <div class="collapsible-header">
          <h4 class="html">HTML</h4>
        </div>
        <div class="collapsible-body">
          <h5>Hyper Text Markup Language</h5>
          <p>The language that defines and adds content to a webpage.</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="html css">Blog</h4>
        </div>
        <div class="collapsible-body">
          <div class="blog-container">
            <div class="blog-post">
              <h4 class="blog-date">November 23 2015</h4>
              <h5 class="blog-title">This is my first article</h5>
              <p class="blog-content">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero atque ea necessitatibus sed blanditiis animi eos velit, quos voluptatibus possimus!</p>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero atque ea necessitatibus sed blanditiis animi eos velit, quos voluptatibus possimus!</p>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero atque ea necessitatibus sed blanditiis animi eos velit, quos voluptatibus possimus!</p>
              <hr>
            </div>
            <div class="blog-post">
              <h4 class="blog-date">December 11 2015</h4>
              <h5 class="blog-title">This is another article</h5>
              <p class="blog-content">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero atque ea necessitatibus sed blanditiis animi eos velit, quos voluptatibus possimus!</p>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero atque ea necessitatibus sed blanditiis animi eos velit, quos voluptatibus possimus!</p>
              <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vero atque ea necessitatibus sed blanditiis animi eos velit, quos voluptatibus possimus!</p>
            </div>
          </div>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="html">Form</h4>
          <!-- Used CSS & JS -->
        </div>
        <div class="collapsible-body">
          <!-- action - where the form sends data to -->
          <!-- method - what HTTP method (get/post) -->
          <h3 class="push-down">Register</h3>
          <form action="#">
            <div>
              <div class="input-field">
                <label for="first-name">First Name:</label>
                <input id="first-name" name="name" type="text" placeholder="Aaron" required>
              </div>
              <div class="input-field">
                <label for="last-name">Last Name:</label>
                <input id="last-name" name="name" type="text" placeholder="Casanova" required>
              </div>
            </div>
            <div class="radio-style">
              <input id="male" name="gender" type="radio" value="male">
              <label for="male">Male</label>
              <input id="female" name="gender" type="radio" value="female">
              <label for="female">Female</label>
              <input id="other" name="gender" type="radio" value="other">
              <label for="other">Other</label>
            </div>
            <div>
              <div class="input-field">
                <label for="email">Email:</label>
                <input type="email" name="email" placeholder="example@gmail.com" required>
              </div>
              <div class="input-field">
                <label for="password">Password:</label>
                <input type="password" name="password" pattern=".{8,12}" required title="8 to 12 characters">
              </div>
            </div>
            <div>
              <label>Birthday:</label>
                <select name="month">
                  <option disabled selected>Month</option>
                  <option>January</option>
                  <option>Februry</option>
                  <option>March</option>
                </select>
                <select name="day">
                  <option disabled selected>Day</option>
                  <option>10</option>
                  <option>11</option>
                  <option>12</option>
                </select>
                <select name="year">
                  <option disabled selected>Year</option>
                  <option>2000</option>
                  <option>2001</option>
                  <option>2002</option>
                </select>
            </div>
            <div>
              <input id="agreed" name="agreed" type="checkbox" required>
              <label for="agreed">I agree to the terms and condititions:</label>
            </div>
            <div class="btn-center">
            <input class="form-btn-style" type="submit">
            </div>
          </form>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="html">Tables</h4>
        </div>
        <div class="collapsible-body">
          <h5>Skills</h5>
          <table style="width:100%">
            <tr>
              <th><i class="fa fa-html5 table-icons"></i>HTML</th>
              <td>1 Year Experience</td>
              <td>Highschool & Online Courses</td>
            </tr>
            <tr>
              <th><i class="fa fa-css3 table-icons"></i>CSS</th>
              <td>1 Year Experience</td>
              <td>Highschool & Online Courses</td>
            </tr>
            <tr>
              <th><i class="fa fa-sitemap table-icons"></i>JAVASCRIPT</th>
              <td>6 Months Experience</td>
              <td>Online Courses</td>
            </tr>
            <tr>
              <th><i class="fa fa-image table-icons"></i>PHOTOSHOP</th>
              <td>2 Years Experience</td>
              <td>Highschool & Online Courses</td>
            </tr>
            <tr>
              <th><i class="fa fa-motorcycle table-icons"></i>ILLUSTRATOR</th>
              <td>1 Year Experience</td>
              <td>Highschool & Online Courses</td>
            </tr>
            <tr>
              <th><i class="fa fa-clone table-icons"></i>LIGHTROOM</th>
              <td>2 Years Experience</td>
              <td>Online Courses</td>
            </tr>
            <tr>
              <th><i class="fa fa-camera-retro table-icons"></i>PHOTOGRAPHY</th>
              <td>2 Years Experience</td>
              <td>Online Courses & Owned Photobooth Business</td>
            </tr>
          </table>
        </div>
      </li>
<!-- ********************************************
NOTE CSS
********************************************* -->
      <li>
        <div class="collapsible-header">
          <h4 class="css">Flexbox</h4>
        </div>
        <div class="collapsible-body">
          <p>Flexbox is a more efficient wat to lay out, align and distribute space among items in a container (even if their size is unknown)</p>
          <h5>Flexbox Terminology</h5>
          <p><strong>Flex Container</strong> - Whatever item or container that has the display flex property</p>
          <p><strong>Flex Item(s)</strong> - The item(s) inside the flex container</p>
          <p><strong>Main Axis</strong> - Defaults to "X" axis, but can be altered by the flex-direction</p>
          <p><strong>Cross Axis</strong> - Defaults "Y" axis, but can be altered by the flex-direction</p>
          <hr>
          <hr>
          <h5>Common Flexbox Properties</h5>
          <p><strong>display: flex;</strong> - must be initiated on the container to use flexbox</p>
          <hr>
          <p><strong>Container Properties</strong></p>
          <p><strong>flex-direction: row | row-reverse | column | column-reverse;</strong> - specifies how items are placed in the flex container, defining the main axis and its direction</p>
          <p><strong>flex-wrap: nowrap | wrap | wrap-reverse;</strong> - specifies whether items are forced into a single line OR can be wrapped into multiple lines</p>
          <p><strong>justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;</strong> - defines how space is distributed between items in the flex container (along the main axis) - does not change the order, just moves the flex items</p>
          <p><strong>align-items: flex-start | flex-end | center | baseline | stretch;</strong> - defines how space is distributed between itmes in the flex container (along the cross axis) - refers to the alignment of indivual lines</p>
          <p><strong>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</strong> - defines how space is distributed <em>between rows</em> in the flex container (along the cross axis) - refers to the alignment of the whole multiline structure</p>
          <hr>
          <p><strong>Flex Item Properties</strong></p>
          <p><strong>order: [integer]; /* default is 0 */</strong> - specifies the order used to lay out items in their flex container (each flex item defaults to order: 0)</p>
          <p><strong>flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]</strong> - defines how a flex item will grow or shrink to fit the available space in a container (shorthand property)</p>
          <p><strong>flex-basis: [length] | auto; /* default auto */</strong> - sort of like width, but not - specifies the ideal size of a flex item BEFORE it's placed into a flex container</p>
          <p><strong>flex-grow: [number]; /* default 0 */</strong> - dictates how the unused space should be spread amongst flex items</p>
          <p><strong>flex-shrink: [number]; /* default 1 */</strong> - dictates how items should shrink when there isn't enough space in the container</p>
          <p><strong>align-self: auto | flex-start | flex-end | center | baseline | stretch;</strong> - allows you to override align-items on individual flex items</p>
          <hr><hr><hr>
          <div class="flex-nav">
            <a href=""><i class="fa fa-home"></i>Home</a>
            <a href=""><i class="fa fa-question"></i>About</a>
            <a href=""><i class="fa fa-phone"></i>Contact</a>
            <a href=""><i class="fa fa-paw"></i>Dogs</a>
          </div>
          <hr>
          <div class="holy-grail-container">
            <div class="holy-header">
              <a href="" class="holy-link">NAV LEFT</a>
              <a href="" class="holy-link">NAV RIGHT</a>
            </div>
            <div class="holy-main">
              <div class="holy-article">MAIN CONTENT</div>
              <div class="holy-nav">SIDE NAV</div>
              <div class="holy-aside">ASIDE</div>
            </div>
            <div class="holy-footer">FOOTER</div>
          </div>
          <hr>
          <div class="flex-widget">
            <div class="widget-box">
              <h6>Rick and Morty the Game review: a fun ramp blah blah...</h6>
            </div>
            <div class="widget-box widget-middle">
              <h6>Lord of the Rings Seventeen million review: a fun ramp blah blah...</h6>
            </div>
            <div class="widget-box">
              <h6>Game of Thrones the game review: a fun ramp blah blah...</h6>
            </div>
          </div>
          <hr>
          <div class="flex-container">
            <div class="box box-1">1</div>
            <div class="box box-2">2</div>
            <div class="box box-3">3</div>
            <div class="box box-4">4</div>
            <div class="box box-5">5</div>
            <div class="box box-6">6</div>
            <div class="box box-7">7</div>
            <div class="box box-8">8</div>
            <div class="box box-9">9</div>
          </div>
          <hr>
          <div class="flex-ex1">
            <div class="sidebar">
              <div class="section">
                <div class="item">Message</div>
                <div class="item">Friends</div>
                <div class="item">User Profile</div>
              </div>
              <div class="section">
                <div class="item">Setting</div>
                <div class="item">Questions?</div>
              </div>
            </div>
          </div>
          <hr><hr><hr>
          <h5>
            <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank">
              Flexbox Guide
            </a>
          </h5>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Keyframe Animations</h4>
        </div>
        <div class="collapsible-body">
          <p>Allow for complex multi-component/multi-state animations</p>
          <hr>
          <hr>
          <h5>Common Keyframe Animation Properties</h5>
          <p><strong>animation-name</strong></p>
          <p><strong>animation-duration</strong></p>
          <p><strong>animation-timing-function</strong></p>
          <p><strong>animation-delay</strong></p>
          <hr>
          <h5>Newer Animation Properties</h5>
          <p><strong>animation-iteration-count</strong> - how many times should it repeat</p>
          <p><strong>animation-fill-mode</strong> - specifies how an animation should apply styles before and after the animaiton</p>
          <p><strong>animation-direction</strong> - basically the start and end point for playback</p>
          <p><strong>animation-play-state</strong> - specifies whether the animation is running or paused</p>
          <hr>
          <h5>Shorthand Animations</h5>
          <pre>
            <code>
              animation: name duration
              timing-function delay
              iteration-count direction
              fill-mode play-state;
            </code>
          </pre>
          <hr>
          <h5>Loader Icon</h5>
          <input type="button" id="init-loader" value="Download...">
          <br>
          <br>
          <div class="loader"></div>
          <hr>
          <br>
          <input type="button" id="init-sun-scene" value="Sun Scene">
          <br>
          <br>
          <div class="no-sun-scene">
            <div class="no-sun"></div>
            <div class="grass"></div>
          </div>
          <hr>
          <br>
          <input type="button" id="init-rainbow" value="Click Me">
          <p class="no-rainbow">Imagination</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="html css">Old Photo Grid - W/ Floats</h4>
        </div>
        <div class="collapsible-body">
          <h5 class="fancy-heading"><span class="fancy-three">3</span> Photo Grid</h5>
          <img class="photo-grid" src="http://c1.staticflickr.com/9/8450/8026519634_f33f3724ea_b.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/8/7218/7209301894_c99d3a33c2_h.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/8/7231/6947093326_df216540ff_b.jpg">
          <img class="photo-grid" src="http://c1.staticflickr.com/9/8788/17367410309_78abb9e5b6_b.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/6/5814/20700286354_762c19bd3b_b.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/6/5647/21137202535_404bf25729_b.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/6/5588/14991687545_5c8e1a2e86_b.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/4/3888/14878097108_5997041006_b.jpg">
          <img class="photo-grid" src="http://c2.staticflickr.com/8/7579/15482110477_0b0e9e5421_b.jpg">
          <span class="clear"></span>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Tic Tac Toe</h4>
        </div>
        <div class="collapsible-body">
          <h5>Game Time</h5>
          <table class="table-basic">
            <tr>
              <td class="td-basic"></td>
              <td class="td-basic vertical"></td>
              <td class="td-basic"></td>
            </tr>
            <tr>
              <td class="td-basic horizontal"></td>
              <td class="td-basic vertical horizontal"></td>
              <td class="td-basic horizontal"></td>
            </tr>
            <tr>
              <td class="td-basic"></td>
              <td class="td-basic vertical"></td>
              <td class="td-basic"></td>
            </tr>
          </table>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Font</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Styling Properties</h5>
          <hr>
          <p class="f-family"><strong class="f-family">font-family:</strong> Georgia;</p>
          <hr>
          <p class="f-size"><strong class="f-size">font-size:</strong> 1.5(rem)(em)(px);</p>
          <hr>
          <p class="f-weight"><strong class="f-weight">font-weight:</strong> 100-800 ++ of 100(bold)(normal);</p>
          <hr>
          <p class="l-height"><strong class="l-height">line-height:</strong> 2; (Usually a value between 1.5 & 2) Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.</p>
          <hr>
          <p class="t-align"><strong class="t-align">text-align:</strong> center;</p>
          <hr>
          <p class="t-decoration"><strong class="t-decoration">text-decoration:</strong> underline;</p>
          <hr>
          <a class="google-fonts" href="https://fonts.google.com/" target="_blank">Google Fonts</a>
          <ul>
            <li>- Select desired font</li>
            <li>- Select font weight in customize tab</li>
            <li>- Copy & Paste the provided link tag in your html document</li>
            <li>- Use freely throughout page</li>
          </ul>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Color</h4>
        </div>
        <div class="collapsible-body">
          <h5>Decimal - Base 10</h5>
          <p>0, 1, 2, 3, 4, 5, 6, 7, 8, 9</p>
          <p>_ _ _ : values are between 0 and 9</p>
          <hr>
          <h5>Binary - Base 2</h5>
          <p>0, 1</p>
          <p>_ _ : values are either 0 or 1</p>
          <hr>
          <h5>Hexadecimal - Base 16</h5>
          <p>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F</p>
          <p>#_ _ _ _ _ _ : values are between 0 and F</p>
          <hr>
          <h5>RGB</h5>
          <p>0 ... 255</p>
          <p>rgb(_ _ _, _ _ _, _ _ _) : values are between 0 and 255</p>
          <hr>
          <h5>RGBA</h5>
          <p>0 ... 255 + 0 ... 1 (alpha channel - transparency)</p>
          <p>rgb(_ _ _, _ _ _, _ _ _, _) : values are between 0 and 255</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Translate - Transform</h4>
        </div>
        <div class="collapsible-body">
          <h5>Lets you move, warp, rotate, and scale elements</h5>
          <div class="crazy-object no-one">1</div>
          <div class="crazy-object no-two">2</div>
          <div class="crazy-object no-three">3</div>
          <div  class="crazy-object no-four">4</div>
          <input type="button" id="button" value="Click Me">
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Rotate - Transform</h4>
        </div>
        <div class="collapsible-body">
          <h5>Lets you move, warp, rotate, and scale elements</h5>
          <br>
          <div class="rotate-one no-rotate-one"></div>
          <div class="rotate-two no-rotate-two"></div>
          <div class="rotate-three no-rotate-three"></div>
          <div class="rotate-four no-rotate-four"></div>
          <br>
          <br>
          <input type="button" id="init-rotate" value="Click Me">
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Transition</h4>
        </div>
        <div class="collapsible-body">
          <h5>4 Transition Properties</h5>
          <p><strong>transition-duration</strong> - how long the change should take</p>
          <p><strong>transition-property</strong> - what individual css properties to transition</p>
          <p><strong>transition-timing-function</strong> - the acceleration of the transition</p>
          <p><strong>transition-delay</strong> - how long to wait before starting the transition</p>
          <p><strong>transition shorthand</strong> - define everything in one line</p>
          <pre>
            <code>
              .example {
                transition: property duration timing-function delay;
              }
            </code>
          </pre>
          <hr>
          <h5>Best Performing Transition Properties</h5>
          <ul>
            <li><strong>transform: translate();</strong></li>
            <li><strong>transform: scale();</strong></li>
            <li><strong>transform: rotate();</strong></li>
            <li><strong>opacity</strong></li>
          </ul>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Hover</h4>
        </div>
        <div class="collapsible-body button-hover">
          <h5 class="expand">Hover CSS Animation</h5>
          <p class="vanish">Try n Catch Me</p>
          <button class="zoom-zoom">Zoom</button>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Animated Photo Gallery</h4>
        </div>
        <div class="collapsible-body button-hover">
          <div class="ani-photo-container">
            <div class="item-img red">
              <img class="disableSave" src="https://images.pexels.com/photos/4827/nature-forest-trees-fog.jpeg?h=350&auto=compress&cs=tinysrgb"/>
              <i class="fa fa-camera"></i>
            </div>

            <div class="item-img blue">
              <img class="disableSave" src="https://images.pexels.com/photos/463734/pexels-photo-463734.jpeg?h=350&auto=compress&cs=tinysrgb"/>
              <i class="fa fa-paw"></i>
            </div>

            <div class="item-img green">
              <img class="disableSave" src="https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?h=350&auto=compress&cs=tinysrgb"/>
              <i class="fa fa-cloud"></i>
            </div>
          </div>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Focus</h4>
        </div>
        <div class="collapsible-body">
          <h5>Focus CSS Animation</h5>
          <p>Try the tab key</p>
          <input type="text" class="input-focus" placeholder="Type & Tab">
          <input type="text" class="input-focus" placeholder="Type & Tab">
          <input type="text" class="input-focus" placeholder="Type & Tab">
          <input type="text" class="input-focus" placeholder="Press Shift + Tab To Go Back">
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Active</h4>
        </div>
        <div class="collapsible-body">
          <h5>Click/Press & Hold</h5>
          <button class="rounder">Round & Out</button>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Animated Button</h4>
        </div>
        <div class="collapsible-body">
          <h5 class="front-center">This Button Has 3 States</h5>
          <button class="ani-butt">Click Here</button>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="css">Selectors</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Selectors</h5>
          <hr>
          <p><strong>Element</strong> - Use tag names to select elements on a page</p>
          <pre>
            <code>
              h1 {
                font-size: 25px;
              }
            </code>
          </pre>
          <hr>
          <p><strong>Class</strong> - Can be applied to multiple elements on page</p>
          <pre>
            <code>
              .completed {
                text-decoration: line-through;
              }
            </code>
          </pre>
          <hr>
          <p><strong>ID</strong> - Applies to one specific element on page</p>
          <pre>
            <code>
              #special {
                background-color: #078881;
              }
            </code>
          </pre>
          <hr>
          <p><strong>Asterisk</strong> - Applies to every element on the page</p>
          <pre>
            <code>
              * {
                margin: 0;
                padding: 0;
              }
            </code>
          </pre>
          <hr>
          <p><strong>Descendant Selector</strong> - Lets you select elements nested within elements (chain together selectors with one space between each)</p>
          <pre>
            <code>
              li .class {
                margin-right: 30px;
              }
            </code>
          </pre>
          <hr>
          <p><strong>Adjacent Selector</strong> - Lets you select element siblings that come immediately after another element (Examples shows only ul's after an h4 tag being selected)</p>
          <pre>
            <code>
              h4 + ul {
                border: 4px solid #2178b0;
              }
            </code>
          </pre>
          <hr>
          <p><strong>Attribute Selector</strong> - Lets you select elements from any specified attribute</p>
          <pre>
            <code>
              input[type="checkbox"] {
                border: 4px solid #2178b0;
              }
            </code>
          </pre>
          <hr>
          <p><strong>nth-of-type</strong> - This selector takes the parameter even, odd, or a numeric value & lets you select those elements of the specified type (Example finds every 3rd ul on the page and styles it)</p>
          <pre>
            <code>
              ul:nth-of-type(3) {
                color: blue;
              }
            </code>
          </pre>
          <hr>
          <p>This whole code snippet is refered to as a declaration</p>
          <pre>
            <code>
              selector {
                property: value;
              }
            </code>
          </pre>
        </div>
      </li>
<!-- ********************************************
NOTE JAVASCRIPT
********************************************* -->
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Timer</h4>
        </div>
        <div class="collapsible-body">
          <input type="number" class="timer-input" placeholder="Count Down">
          <button class="timer-btn">Start Timer</button>
          <br>
          <div>
            <h5 class="timer-display"></h5>
          </div>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">UpperCaseWords</h4>
        </div>
        <div class="collapsible-body">
          <div class="uppercase-div">
            <input id='uppercase-input' type="text" placeholder="lowercase setence">
            <input type="button" value="UpperCase" id="uppercase-submit">
          </div>
          <br>
          <h5 class="uppercase-display"></h5>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Greetr.js</h4>
        </div>
        <div class="collapsible-body">
          <div id="logindiv">
            <select name="" id="lang">
              <option value="en">English</option>
              <option value="es">Spanish</option>
            </select>
            <input type="button" value="Login" id="login">
          </div>
          <h5 id="GreetrHTML"></h5>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Javascript</h4>
        </div>
        <div class="collapsible-body">
          <h5>Javascript Terms</h5>
          <p><strong>*Syntax Parser</strong> - a program that reads your code and determines what it does and if its grammer is valid (translates your code into something the computer can understand) - the programs are known as compilers or interpreters</p>
          <p><strong>*Lexical Environment</strong> - where something sits physically in the code you write (where you write something is important)</p>
          <p><strong>*Execution Context</strong> - a wrapper to help manage the code that is running (multiple lexical environments can exist and the execution context manages which one is current running)</p>
          <p><strong>Name/Value Pair</strong> - a name which maps to a unique value - the name may be defined more than once, but only can have one value in any given <em>context</em> (that value may be more name/value pairs)</p>
          <p><strong>Object</strong> - a collection of name value pairs (can store properties[primitive key value pairs || more objects] and methods[functions])</p>
          <p><strong>Global Execution Context</strong> - is the base execution context(accessible everywhere to everything in your code) - JS engine automatically creates a <em>Global Object</em>, a special variable called <em>'this'</em>, and a reference to the <em>Outer Environment</em></p>
          <p><strong>Creation & Hoisting</strong> - there are two phases to an Execution Context - <strong>Creation Phase:</strong> creates the Global Object, the variable 'this', an Outer Environment reference, and sets up memory space for variables and function (Hoisting)[sets all variables to undefined while functions sit in memory in their entirety] - <strong>Execution Phase:</strong> runs your code line by line (takes the undefined vars and assigns the specified values)</p>
          <p><strong>Undefined</strong> - a special JS value that means the value has not been set</p>
          <p><strong>*Single Threaded</strong> - one command is executed at a time</p>
          <p><strong>*Synchronous</strong> - one at a time (and in order...)</p>
          <p><strong>*Asynchronous</strong> - more than one at a time</p>
          <p><strong>*Invocation</strong> - running a function '()' - any time you invoke a function a new execution context is created and placed on the execution stack</p>
          <p><strong>Execution Stack</strong> - when your code is running and hits an invocation, it stops running its current execution, creates a new execution context for which will pop off and return to the original execution once completed</p>
          <p><strong>Event Queue</strong> - full of events/notifications of events (only when the execution stack is empty will the JS engine look at the event queue)</p>
          <p><strong>*Variable Environments</strong> - where the variables live in memory (every execution context has its own variable environment/memory space)</p>
          <p><strong>Outer Environment</strong> - refers to the location of where the invoked function sits lexically (if JS can't find the value of a var in its current execution context it will look in the outer environment)</p>
          <p><strong>Scope</strong> - where a variable is available in your code (what execution context the variable is in)</p>
          <p><strong>Scope Chain</strong> - the chain of outer environment references JS uses to find the value of a variable</p>
          <p><strong>let</strong> - is a way to define a variable using block scoping</p>
          <p><strong>*Dynamic Typing</strong> - you don't tell the engine what type of data a variable holds, it figures it out while your code is running</p>
          <p><strong>*Primitive Type</strong> - a type of data that represents a single value (not an object)
            <ul class="vocab-lists">
              <li><em>undefined</em> (represents lack of existence [you shouldn't set a var to this])</li>
              <li><em>null</em> (represents lack of existence [you can set a variable to this])</li>
              <li><em>string</em> (a sequence of characters | '' and "" can be used)</li>
              <li><em>boolean</em> (true or false)</li>
              <li><em>number</em> (floating point number [always some decimals attached])</li>
              <li><em>symbol</em></li>
            </ul>
          </p>
          <p><strong>*Operator</strong> - a special function that is syntactically (written) differently (operators generally take two parameters and return one result)</p>
          <p><strong>*Operator Precedence</strong> - which operator function gets called first</p>
          <p><strong>*Associativity</strong> - what order operator functions get called in: left-to-right or right-to-left</p>
          <p><strong>Coercion</strong> - When the javascript engine is given multiple values of different <em>types</em> it attempts to convert them to the same primitive type (converting a value from one type to another)</p>
          <p><strong>*Namespace</strong> - a container for variables and functions (typically to keep variables and functions with the same name separate)</p>
          <p><strong>JSON</strong> - JavaScript Object Notation (inspired by JS object literal syntax) - used mainly to send data - properties (both names&values) must be wrapped in quotes
            <ul>
              <li><em>Built in JS methods to use with JSON</em></li>
              <li><em>JSON.stringify(object)</em> - take JS object and makes it valid JSON</li>
              <li><em>JSON.parse('json')</em> takes JSON and makes it a JS object</li>
            </ul>
          </p>
          <p><strong>*First Class Functions</strong> - everything you can do with other types you can do with functions (assign them to variables, pass them around(as arguments), create them on the fly)</p>
          <p><strong>Function (in JS)</strong> - special type of object - can attach <em>primitives</em>(name value pairs), <em>objects</em>, and other <em>functions</em> - special properties include: it's <em>NAME</em> (optional, can be anonymous), and <em>CODE</em> (holds the actual lines of code you wrote [<em>invocable with ()</em>])</p>
          <p><strong>*Arguments</strong> - the parameters you pass to a funtion (JS gives you a keyword of the same name which contains them all [the value(s) are presented in what looks like an array (array like)])</p>
          <p><strong>*(function) Expression</strong> - a unit of code that results(returns) in a value (doesn't have to save to a variable)</p>
          <p><strong>*(function) Statement</strong> - declares a function (saved for later use, and will be executed later, when it is invoked (called)) [statements don't <em>return</em> a value by default, you must state that]</p>
          <p><strong>By Value</strong> - when setting the value of one primitive(a=3) to another(b=a), the JS engine will create a copy of the value of 'a' for 'b' and place it in a new/seperate location memory - all primitives interact by value</p>
          <p><strong>By Reference</strong> - when you have an object(a={greet:'hello'}) and set (b=a), the JS engine will create 'b' with a reference to the location in memory where the values of 'a' are stored['a' and 'b' have the same value as they point to the same location in memory] - all objects interact by reference when setting them equal to each other or passing to a function</p>
          <p><strong>*Mutate</strong> - to change something</p>
          <p><strong>*Immutable</strong> - can't be changed</p>
          <p><strong>*Whitespace</strong> - invisible characters that create literal 'space' in your written code (carriage returns, tabs, and spaces)</p>
          <p><strong>Immediately Invoked Function Express (IIFE)</strong> - executing code on the fly (invoking a function after creating it) - helps avoid namespace collisions because the invoked function creates a seperate variable environment through it's execution context</p>
          <p><strong>Closures</strong> - when a function 'a' returns another function 'b' we can make use of any variables stored in 'a' while running code in 'b' - although the exection for 'a' has been popped off the stack JS still keeps the data for 'a' in memory for which 'b' can reference it through it's outer environments to find the desired values</p>
          <p><strong>Factory</strong> - a function that returns or makes other things for me</p>
          <p><strong>*Callback Function</strong> - a function you give to another function, to be run when the other function is finished (function passed as argument into another function then invoked by/within the other function)</p>
          <p><strong>*Function Currying</strong> - creating a copy of a function but with some preset parameters (useful in mathmatics)</p>
          <p><strong>*Inheritance</strong> - one object gets access to the properties and methods of another object (Classical - whats currently best known and popular[tends to be verbose])(Prototypal - simple.flexible.extensible.easy to understand)</p>
          <p><strong>Protoype Chain</strong> - where we have access to a property or method amongst a sequence of objects that are connected via the proto type property</p>
          <p><strong>*Reflection</strong> - an object can look at itself, listing and changing its properites and methods</p>
          <p><strong>*Function Constructor</strong> - a normal function that is used to construct objects (the 'this' variable points to the new empty object, and that object is returned from the function automatically) - Capitalize Function Name</p>
          <p><strong>Prototype</strong> - (assign your methods as such: Constructor.prototype = function(){} - this method will be available to every related constructor object) every function in JS has access to a prototype property (starts off as an empty object)  - used only by the <em>new</em> operator - the prototype property of all functions is where the prototype chain points for any objects created using the specific function constructor - good for saving memory space as the method only needs to be written once, rather than copied on all created objects</p>
          <p><strong>Built-In Constructors</strong> - JS allows access to many built constructors such as String an Number which we can add methods to their prototype property for access throughout our project (not super recommended - for ex. sometimes methods wont function properly due to <en>type</en> errors when using ===)</p>
          <p><strong>*Polyfill</strong> - code that adds a feature which the engine may lack</p>
          <p><strong>Object.create()</strong> - method creates a new object with the specified prototype object and properties - RESEARCH MORE!!!</p>
          <p><strong>*Syntatic Sugar</strong> - a different way to type something that doesn't change how it works under the hood (Constructor Function, Object.create(), 'new' ES6 Classes - all do the same basic thing)</p>
          <p><strong>*Method Chaining</strong> - calling one method after another, and each method affects the parent object (So obj.method1().method2() where both methods end up with a 'this' variable pointing at 'obj')</p>
          <p><strong>*Transpile</strong> - convert the syntax of one programming language, to another</p>
          <p><strong>Higher Order Functions</strong> - a function that accepts a callback as a parameter</p>
          <p><strong>Data Structure</strong> - Ways of storing data</p>
          <p>Can either take a function as an argument or they return another function</p>
          <p><strong>The Stack (refering to the execution stack)</strong> - an ordered data structure - keeps track of function invocations - part of the JS runtime(you don't access it directly)</p>
          <p><strong>Stack Frames (refering to the each execution context)</strong> - each has info on: the function that was invoked - the params that were passed to the function - current line number</p>
          <p><strong>Heap</strong> - the area in memory where your data is stored</p>
          <p><strong>Truthy & Falsy</strong> - Values that aren't actually <em>true</em> or <em>false</em>, are still inherently "truthy" or "falsey" when evaluated in a boolean conext</p>
          <ul class="vocab-lists">
            <li><strong>Falsy Values</strong></li>
            <li>false</li>
            <li>' ' (empty string)</li>
            <li>null</li>
            <li>undefined</li>
            <li>NaN</li>
            <li><strong>Everything Else Is Truthy</strong></li>
          </ul>
          <hr>
          <hr>
          <h5>JS Concepts</h5>
          <hr>
          <hr>
          <p><strong>'this'</strong> - is determined by how a function is called (in most cases) <em>SEE THIS KEYWORD SECTION</em>
            <ul>
              <li><em>Function methods for assigning the 'this' keyword</em></li>
              <li><em>.call</em> - invokes the function and lets you set up the 'this' keyword (pass additional params seperated by commas)</li>
              <li><em>.apply</em> - invokes the function and lets you set up the 'this' keyword (pass additional params inside an array)</li>
              <li><em>.bind</em> - creates a copy of the function and lets you set up the 'this' keyword (also lets you set up default parameters/ aka permanent preset params)</li>
            </ul>
          </p>
          <p><strong>forEach</strong> - function forEach(array, callback){} - function callback(curElement, currentIndex, array){}</p>
          <pre>
            <code>
              function forEach(arr, callback) {
                for (var i = 0; i < arr.length; i++) {
                  callback(arr[i], i, arr);
                }
              }
            </code>
          </pre>
          <p><strong>findIndex</strong> - returns the index of the first element in an array for which the callback returns a truthy value. -1 is returned if the callback never returns a truthty value -- function findIndex(array, callback){} - function callback(curElement, curIndex, array){}</p>
          <pre>
            <code>
              function findIndex(arr, callback) {
                for (var i = 0; i < arr.length; i++) {
                  if (callback(arr[i], i, arr)) {
                    return i;
                  }
                }
                return -1;
              }
            </code>
          </pre>
          <p><strong>setTimeout</strong> - a function that asynchronously invokes a callback after a delay in milliseconds (every time setTimeout is invoked you get back an associated ID - best to save setTimeout within var if access to ID is needed - for ex. var timerId = setTimeout(callback, delay) -- setTimeout(function () {
            clearTimeout(timerId);
          }, delay)</p>
          <pre>
            <code>
              // setTimeout usage
              function callback() {
                console.log('callback function');
              }
              var delay = 1000; // Delay is in ms
              setTimeout(callback, delay);
            </code>
          </pre>
          <p><strong>setInterval</strong> - a function that continually invokes a callback after every X milliseconds, where X is provided to setInterval (clearInterval just like clearTimeout - store setInterval in var[stores ID] then pass it to clearInterval(var))</p>
        </div>
        <pre>
          <code>
            // setInterval unstage
            function callback() {
              console.log('callback continuously');
            }
            var repeat = 3000;
            setInterval(callback, repeat);
          </code>
        </pre>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">prototype & __proto__</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Prototype</strong> - is an object that can have methods and properties placed on it - the prototype is shared among all objects created by that constructor function</p>
          <p>Every time the new keyword is used, a link between the object created and the prototype property of the constructor is established - this link can be accessed using __proto__</p>
          <p>The prototype object contains a property called constructor, which points back to the constructor function</p>
          <p>To share properties and methods for objects created by a constructor function, place them in the prototype as it is the most efficient</p>
          <img class="responsive-img" src="./img/proto.png" alt="Prototype/__proto__ Diagram">
          <pre>
            <code>
              // this is the constructor function
              function Person(name) {
                this.name = name;
              }

              // this is an object created from the Person constructor
              var casy = new Person('Aaron');
              var nova = new Person('Casanova');

              // since we used the new keyword, we have established
              // a link between the object and the prototype property
              // we can access that using __proto__

              casy.__proto__ === Person.prototype; // true
              nova.__proto__ === Person.prototype; // true

              // the Person.prototype object also has a property
              // called constructor which points back to the function
              Person.prototype.constructor === Person; // true

              --------------------------------------------

              function Vehicle(make, model, year) {
                this.make = make;
                this.model = model;
                this.year = year;
                this.isRunning = false;
              }

              Vehicle.prototype.turnOn = function () {
                return this.isRunning = true;
              };

              Vehicle.prototype.turnOff = function () {
                return this.isRunning = false;
              };

              Vehicle.prototype.honk = function () {
                if (this.isRunning) {
                  return 'beep';
                }
              };
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Object Oriented Programming (OOP)</h4>
        </div>
        <div class="collapsible-body">
          <p>A model based on objects constructed from a blueprint</p>
          <p><strong>classes</strong> - are the name of the  blueprints for which objects are constructed</p>
          <p><strong>instances</strong> - are what we call the objects that are created from classes</p>
          <p><strong>Constructor Functions</strong> - lets us use a function as a blueprint for what each [House] should be [A function that's used specifically to construct an object] (see example)</p>
          <p><strong>new</strong> - the 'new' keyword must be used with a function or else we get a type error</p>
          <ol>
            <li>Creates an empty object</li>
            <li>Sets the keyword 'this' to the empty object</li>
            <li>Adds the line `return this` to the end of the function, which follows it</li>
            <li>Adds a property onto the empty object called '__proto__'(double underscore commonly called dunder || dunderProto), which links the prototype property on the constructor function to the empty object</li>
          </ol>
          <pre>
            <code>
              // Capitalize function name

              function House(bedrooms, bathrooms, numSqft) {
                this.bedrooms = bedrooms;
                this.bathrooms = bathrooms;
                this.numSqft = numSqft;
              }

              var firstHouse = new House(2, 2, 1200);
              console.log(firstHouse.bedrooms); // 2
              console.log(firstHouse.bathrooms); // 2
              console.log(firstHouse.numSqft); // 1200

              ---------------------------------------------------

              function Dog(name, age) {
                this.name = name;
                this.age = age;
                this.bark = function () {
                  console.log(this.name + ' just barked!');
                };
              }

              var moose = new Dog('Moose', 3);

              moose.bark(); // Moose just barked!

              ---------------------------------------------------

              function Car(make, model, year) {
                this.make = make;
                this.model = model;
                this.year = year;

                // we can also set properties on the keyword 'this'
                // that are preset values
                this.numWheels = 4;
              }

              function Motorcycle(make, model, year) {
                // using call
                Car.call(this, make, model, year);
                this.numWheels = 2;
              }

              function Motorcycle(make, model, year) {
                // using apply
                Car.apply(this, [make, model, year]);
                this.numWheels = 2;
              }

              function Motocycle(make, model, year) {
                // even better using apply with arguments
                Car.apply(this, arguments);
                this.numWheels = 2;
              }
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">'THIS' keyword</h4>
        </div>
        <div class="collapsible-body">
          <h5>THIS</h5>
          <p>The 'this' keyword is determined by it's execution context (value is determined at execution)</p>
          <p><strong>Global, Object/Implicit, Explicit, New</strong> - are the four rules of how the value of the 'this' keyword can be determined</p>
          <p><strong>1 - Global Context</strong> - when 'this' is not inside of a declared object</p>
          <p><strong>Strict Mode ('use strict')</strong> - when placed at the top of our document it enables strict mode for which the value of 'this' is undefined when inside a function (so you don't accidently assign properties/create variables on the global object)</p>
          <p><strong>2 - Implicit/Object</strong> - when the keyword 'this' IS inside of a declared object (the value will always be the closest parent object)</p>
          <p><strong>3 - Explicit Binding</strong> - choose what we want the context of 'this' to be using call, apply or bind (these can only be used by functions)</p>
          <p><strong>4 - The 'new' keyword</strong> - it is a reserved keyword - we can set the context of the keyword 'this' using the 'new' keyword (when the 'new' keyword is used an object is created on the spot) - the value of the keyword 'this' is set to an empty object and returned from the function that is used with the 'new' keyword</p>
          <table>
            <thead>
              <tr>
                <th><strong>NAME OF METHOD</strong></th>
                <th><strong>PARAMETERS</strong></th>
                <th><strong>INVOKE IMMEDIATELY?</strong></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>Call</strong></td>
                <td>thisArg,a,b,c,d,...</td>
                <td>Yes</td>
              </tr>
              <tr>
                <td><strong>Apply</strong></td>
                <td>thisArg,[a,b,c,d,...]</td>
                <td>Yes</td>
              </tr>
              <tr>
                <td><strong>Bind</strong></td>
                <td>thisArg,a,b,c,d,...</td>
                <td>No</td>
              </tr>
            </tbody>
          </table>
          <pre>
            <code>
              var person = {
                firstName: 'Aaron',
                sayHi: function () {
                  return 'Hi ' + this.firstname;
                },

                determineContext: function () {
                  return this === person;
                },

                dog: {
                  sayHello: function () {
                    return 'Hello ' + this.firstName;
                  },

                  determineContext: function () {
                    return this === person;
                  },
                },

                addNumbers: function (a, b, c, d) {
                  return this.firstName + ' just calculated ' + (a + b + c + d);
                },

                sayHowdy: function () {
                  setTimeout(function () {
                    console.log('Howdy ' + this.firstName);
                  }, 1000);
                },

                sayBonjour: function () {
                  setTimeout(function () {
                    console.log('Bonjour ' + this.firstName);
                  }.bind(this), 1000);
                },
              };

              var casanova = {
                firstName: 'Casy',
              };

              var casyCalc = person.addNumbers.bind(casanova, 1, 2, 3, 4); // function() {}...
              // does not invoke / returns function definition

              // With bind - we do not need to know all the arguments up front
              var casyCalc2 = person.addNumbers.bind(casanova, 1, 2);

              function FullName(firstName, lastName) {
                this.firstName = firstName;
                this.lastName = lastName;
              }

              var casy = new FullName('Aaron', 'Casanova');

              person.sayHi(); // 'Hi Aaron'
              person.determineContext(); // true

              person.dog.sayHello.call(person); // 'Hello Aaron'
              person.dog.determineContext.call(person); // true
              // Notice when using the 'call' method we do NOT invoke sayHello or determineContext
              // (the 'thisArg' can be any declared object in the file)
              person.sayHi.call(casanova); // Hi Casy
              person.sayHi.apply(casanova); // Hi Casy

              person.addNumbers(1, 2, 3, 4); // Aaron just calculated 10
              person.addNumbers.call(casanova, 1, 2, 3, 4); // Casy just calculated 10
              person.addNumbers.apply(casanova, [1, 2, 3, 4]); // Casy just calculated 10

              casyCalc(); // Casy just calculated 10
              casyCalc2(3, 4); // Casy just calculated 10

              // setTimeout is a method on the window object
              person.sayHowdy(); // Howdy undefined (1000 milliseconds later)
              // Use bind to set the correct context of 'this'
              person.sayBonjour(); // Bonjour Aaron (1000 milliseconds later)

              casy.firstName; // 'Aaron'
              casy.lastName;// 'Casanova'
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Closures</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Closure</strong> - is a function that makes use of variables defined in outer functions that have previously returned</p>
          <h5>Things to note</h5>
          <p>We have to 'return' the inner function for this to work</p>
          <p>We can either call the inner function right away by using an extra () or we can store the result of the function in a variable (similar to how bind works)</p>
          <p>We do NOT have to give the inner function a name - we can make it anonymous</p>
          <p>Closures only exist when an inner function makes use of variables defined from an outer function that has returned. If the inner function does not make use of any of the external variables all we have is a nested function</p>
          <pre>
            <code>
              function outer() {
                var data = 'closures are ';
                return function inner() {
                  var innerData = 'awesome';
                  return data + innerData;
                };
              }

              outer()(); // closures are awesome

              function outer(a) {
                return function inner(b) {
                  // the inner function is making use of the variable 'a'
                  // which was defined in an outer funtion called 'outer'
                  // and by the time this is called, that outer function
                  // has returned this function called 'inner' is a closure
                  return a + b;
                };
              }

              outer(5)(5); // 10

              var storeOuter = outer(5);
              storeOuter(10); //15
            </code>
          </pre>
          <p><strong>Private Variables</strong> - variables that can not be modified externally</p>
          <pre>
            <code>
              function counter() {
                var count = 0;z
                return function () {
                  return ++count;
                };
              }

              counter1 = counter();
              counter1(); // 1
              counter1(); // 2

              counter2 = counter();
              counter2(); // 1
              counter2(); // 2

              counter1(); // 3 this is not affected by counter2!

              count; // ReferenceError: count is not defined - because it is private!

              function classRoom() {
                var instructors = ['Colt', 'Elie']; // private var
                return {
                  getInstructors: function () {
                    return instructors;
                  },

                  addInstructor: function (instructor) {
                    instructors.push(instructor);
                    return instructors;
                  },
                };
              }

              course1 = classRoom();
              course1.getInstructors(); // ['Colt', 'Elie']
              course1.getInstructors('Ian'); // ['Colt', 'Elie', 'Ian']
              course1.getInstructors(); // ['Colt', 'Elie', 'Ian']

              course2 = classRoom();
              course2.getInstructors(); // ['Colt', 'Elie'] - not affected by course1

              // We also have NO access to the instructors variables
              // which makes it private - no one can modify it...
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">jQuery</h4>
        </div>
        <div class="collapsible-body">
          <h5>Selecting with jQuery</h5>
          <p><strong>$('selectorGoesHere')</strong> - Similar to querySelectorAll, in that we provide a CSS style selector and jQuery will return all matching elements</p>
        <hr>
        <hr>
        <h5>Manipulate Style</h5>
        <p><strong>.css()</strong> - method is jQuery's interface to styling</p>
        <pre id="special">
          <code>
            $(selector)

            .css(property, value)

            // select elem with id "special" and give it a border
            $('#special').css('border', '2px solid red');

            // we can also pass in an object with stylesheet
            var styles = {
              backgroundColor: 'pink',
              fontWeight: 'bold'
            };

            $('#special').css(styles);
          </code>
        </pre>
        <hr>
        <hr>
        <h5>Common jQuery Methods</h5>
        <p><strong>.text()</strong> - Get the combined text contents of each element in the set of matched elements, including their decendants, or set the text contents of the matched elements</p>
        <pre>
          <code>
            $(selector)

            .text(newValue)
          </code>
        </pre>
        <p><strong>.html()</strong> - Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element</p>
        <pre>
          <code>
            $(selector)

            .html('&lt;p&gt;Example&lt;/p&gt;')
          </code>
        </pre>
        <p><strong>.attr()</strong> - Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element</p>
        <pre>
          <code>
            $(selector)

            .attr(attribute, value)
          </code>
        </pre>
        <p><strong>.val()</strong> -  Get the current value of the first element in the set of matched elements or set the value of every matched element</p>
        <pre>
          <code>
            $(selector)

            .val(value)
          </code>
        </pre>
        <p><strong>.addClass()</strong> -  Adds the specified class(es) to each element in the set of matched elements</p>
        <p><strong>.removeClass()</strong> -  Removes the specified class(es) to each element in the set of matched elements</p>
        <p><strong>.toggleClass()</strong> -  Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument</p>
        <pre>
          <code>
            $(selector)

            .addClass('class-name')
            .removeClass('class-name')
            .toggleClass('class-name')
          </code>
        </pre>
        <hr>
        <hr>
        <h5>Common jQuery Event Methods</h5>
        <p><strong>click()</strong> - method is a quick and easy way to add a click listener to element(s)</p>
        <pre>
          <code>
            // prints when item with id 'submit' is clicked
            $('#submit').click(function(){
              console.log('Another Click');
            });
          </code>
        </pre>
        <p><strong>keypress()</strong> - method is a quick and easy way to add a keypress listener to element(s)</p>
        <pre>
          <code>
            $('#target').keypress(function(){
              console.log('Handler for .keypress() called');
            });
          </code>
        </pre>
        <p><strong>on()</strong> - works similarly to addEventListener. It lets you specify the type of event to listen for.</p>
        <pre>
          <code>
            // prints when item with id 'submit' is clicked
            $('#submit').on('dblclick', function(){
              console.log('Another Click');
            });
          </code>
        </pre>
        <hr>
        <hr>
        <h5>jQuery Effects</h5>
        <p><strong>fadeOut()</strong> - Hide the matched elements by fading them to transparent</p>
        <p><strong>fadeIn()</strong> - Reveals the matched elements by fading them in from 0 transparency</p>
        <p><strong>fadeToggle()</strong> - Hide or Reveal the matched elements base on elements current state</p>
        <pre>
          <code>
            $('#clickme').click(function(){
              $('#book').fadeOut(1000, function(){
                console.log('Fade Completed');
                // this code will run after the fade time specified
              });
            });
          </code>
        </pre>
        <p><strong>slideOut(), slideIn(), slideToggle()</strong> - all function like the fade methods</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">DOM Events</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>DOM Events</strong> - Making things interactive</p>
          <p><strong>The Process</strong> - Select an element then add an event listener</p>
          <p><strong>The Syntax</strong> - To add a listener, we use a method called <em>addEventListener</em></p>
          <pre>
            <code>
              element.addEventListener(type, functionToCall);

              var button = document.querySelector('button');
              button.addEventListener('click', function(){
                console.log('SOMEONE CLICKED THE BUTTON');
              });
            </code>
          </pre>
          <hr>
          <hr>
          <h5>Common EventListeners</h5>
          <p><strong>Note: the key word THIS inside an eventListener refers to the element the event was trigger on</strong></p>
          <p><strong class="click-demo">click</strong> -  events are fired when a pointing device button (usually a mouse's primary button) is pressed and released on a single element.</p>
          <p><strong class="mouseover-n-out">mouseover</strong> - events are fired when a pointing device is moved onto the element that has the listener attached or onto one of its children</p>
          <p><strong class="mouseover-n-out">mouseout</strong> - events are fired when a pointing device (usually a mouse) is moved off the element that has the listener attached or off one of its children. Note that it is also triggered on the parent when you move onto a child element, since you move out of the visible space of the parent</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">The DOM</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>DOM</strong> - The Document Object Model is the interface between your Javascript and HTML+CSS</p>
          <p>The basic process is <strong>Select</strong> then <strong>Manipulate</strong></p>
          <p><strong>Document</strong> - It all starts with the document, the (root node)(top level object)</p>
          <hr>
          <hr>
          <h5>Common Document Selector Methods</h5>
          <p><strong>document.getElementById()</strong> - Takes a string argument and returns the one element with a matching ID</p>
          <p><strong>document.getElementByClassName()</strong> - Takes a string argument and returns a list of elements that have a matching class (returns node list)</p>
          <p><strong>document.getElementByTagName()</strong> - Returns a list of all elements of a given taf name, like &lt;li&gt; or &lt;h1&gt; (returns node list)</p>
          <p><strong>document.querySelector()</strong> - Returns the first element that matches a given CSS-style selector</p>
          <p><strong>document.querySelectorAll()</strong> - Returns a list of elements that matches a given CSS-style selector (returns node list)</p>
          <hr>
          <hr>
          <h5>Common Properties</h5>
          <p><strong>style</strong> - The style property is one way to manipulate an element's style</p>
          <pre>
            <code>
              var tag = document.querySelector('h1');

              // manipulate
              tag.style.color = 'blue';
              tag.style.border = '1px solid red';
              tag.style.fontSize = '70px';

              // Above is not DRY
              // * Define a class in CSS File * //
              .some-class {
                color: blue;
                border: 1px solid red;
                font-size: 70px;
              }
              // Add the new class to the previously selected element
              tag.classList.add('some-class');
            </code>
          </pre>
          <hr>
          <p><strong>classList</strong> - A read-only list that contains the classes for a given element. It is not an array.</p>
          <pre>
            <code>
              var tag = document.querySelector('h1');

              // Add a class to the selected element
              tag.classList.add('another-class');

              // Remove a class
              tag.classList.remove('another-class');

              // Toggle a class
              tag.classList.toggle('another-class');
            </code>
          </pre>
          <hr>
          <p><strong>textContent</strong> - Returns a string of all the text contained in a given element</p>
          <pre>
            <code>
              var tag = document.querySelector('p');

              // Retrieve the textContent:
              tag.textContent // 'This is an awesome paragraph'

              // alter the textContent:
              tag.textContent = 'blah blah blah';
            </code>
          </pre>
          <hr>
          <p><strong>innerHTML</strong> - Similar to textContent, except it returns a string of all the HTML contained in a given element</p>
          <strong>Will also render HTML on your page if written appropriately</strong>
          <pre>
            <code>
              var tag = document.querySelector('p');

              // Retrieve the textContent:
              tag.textContent // 'This is an awesome paragraph'

              // alter the textContent:
              tag.textContent = 'blah blah blah';
            </code>
          </pre>
          <hr>
          <hr>
          <p><strong>Attributes</strong> - You have the ability to manipulate the HTML attributes on the page</p>
          <p><h5>getAttribute & setAttribute</h5> - will read and write attributes like <em>src</em> or <em>href</em></p>
          <pre>
            <code>
              var link = document.querySelector('a');
              link.getAttribute('href'); // "www.google.com"
              // Change href attribute
              link.setAttribute('href', 'www.dogs.com');
              // &lt;a href="www.dogs.com"&gt;I am a link&lt;/a&gt;

              // To change the image src
              var img = document.querySelector('img');
              img.setAttribute('src', 'corgi.png');
              // &lt;img src="corgi.png"&gt;
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="html css javascript">Score Keeper</h4>
        </div>
        <div class="collapsible-body">
          <h5 class="score-board"><span class="p1-score-board">0</span> to <span class="p2-score-board">0</span></h5>
          <p>Playing to: <span class="play-to-num">5</span></p>
          <input class="num-input" type="number">
          <button class="p1">Player One</button>
          <button class="p2">Player Two</button>
          <button class="reset">Reset</button>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Objects</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Objects</strong> - Stores multiple key value pairs</p>
          <pre>
            <code>
              Three ways to initialize an empty Object

              // make an empty object and then add to it
              var person = {};
              person.name = 'Aaron Casanova';
              person.age = 25;
              person.city = 'Huntington Beach';

              // all at once
              var person = {
                name: 'Aaron Casanova',
                age: 25,
                city: 'Huntington Beach'
              };

              // another way of initializing an Object
              var person = new Object();
              person.name = 'Aaron Casanova';
              person.age = 25;
              person.city = 'Huntington Beach';
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Array</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Array</strong> - Stores multiple values - Zero-based</p>
          <pre>
            <code>
              Two ways to initialize an empty array

              var friends = [];
              var friends = new Array(); // uncommon
            </code>
          </pre>
          <p><strong>Nested Arrays</strong> - Example below</p>
          <pre>
            <code>
              var friendGroups = [
              ['Harry', 'Ron', 'Hermione'],
              ['Malfoy', 'Crabbe', 'Goyle'],
              ['Mooney', 'Wormtail', 'Prongs']
              ];

              console.log(friendsGroups[2][0]); // returns 'Mooney'
            </code>
          </pre>
          <p><strong>Array Iteration</strong> - Doing something to every item in an array</p>
          <h5>Commonly Used Array Methods</h5>
          <p><strong>Push</strong> - adds values to the end of an array</p>
          <pre>
            <code>
              var colors = ['red', 'orange', 'yellow'];
              colors.push('green');
              // ['red', 'orange', 'yellow', 'green']
            </code>
          </pre>
          <p><strong>Pop</strong> - removes the last item in an array</p>
          <pre>
            <code>
              var colors = ['red', 'orange', 'yellow'];
              colors.pop();
              // ['red', 'orange']
            </code>
          </pre>
          <p><strong>Unshift</strong> - Use unshift to add to the front of an array</p>
          <pre>
            <code>
              var colors = ['red', 'orange', 'yellow'];
              colors.unshift('infrared');
              // ['infrared', 'red', 'orange', 'yellow']
            </code>
          </pre>
          <p><strong>Shift</strong> - Use shift to remove the first item in an array</p>
          <pre>
            <code>
              var colors = ['red', 'orange', 'yellow'];
              colors.shift();
              // ['orange', 'yellow']

              // shift() also returns the removed element
              var col = colors.shift(); // orange
            </code>
          </pre>
          <p><strong>IndexOf</strong> - Use indexOf() to find the index of an item in an array</p>
          <pre>
            <code>
              var friends = ['Charlie', 'Liz', 'David', 'Mattias', 'Liz'];

              // returns the first index at which a given element can be found
              friends.indexOf('David'); // 2
              friends.indexOf('Liz'); // 1, not 4

              // returns -1 if the element is not present
              friends.indexOf('Hagrid'); // -2
            </code>
          </pre>
          <p><strong>Slice</strong> - Use slice() to copy parts of an array</p>
          <pre>
            <code>
              var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];
              // use slice to copy the 2nd and 3d fruits
              // specify index where the new array starts(1) and ends(3)
              var citrus = fruits.slice(1, 3);

              // this does not alter the original fruits Array
              // citrus contains ['Orange', 'Lemon']
              fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']

              // you can also use slice() to copy an entire Array
              var nums = [1,2,3];
              var otherNums = nums.slice();
              // both arrays are [1, 2, 3]
            </code>
          </pre>
          <p><strong>forEach</strong> - JavaScript provides an easy built-in way of iterating over an array: ForEach</p>
          <p>Expected to have at least 1 of the 3 available arguments</p>
          <pre>
            <code>
              // Structure
              arr.forEach(function callback(currentValue[, index[, array]]) {
                // your iterator
              }[, thisArg]);

              var colors = ['red', 'orange', 'yellow', 'green'];

              colors.forEach(function(color){
                // color is a placeholder, call it whatever you want
                console.log(color);
              });

              // ****** Same Functionality ******

              var colors = ['red', 'orange', 'yellow', 'green'];

              for (i = 0; i &lt; colors.length; i++) {
                console.log(colors[i]);
              }
            </code>
          </pre>
          <p><strong>splice</strong> - Cut and remove a specific number of elements out of an array</p>
          <pre>
            <code>
              var index = prompt('Enter index of todo to delete');
              todos.splice(index, 1);
              // 1 specifies the number of values following after the index value that will be removed
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Functions</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Functions</strong> - Let us wrap bits of code up into REUSABLE packages. They are one of the building blocks of JS.</p>
          <pre>
            <code>
              function funName() {
                console.log('Hello World');
              }

              funName(); &larr; runs the function
            </code>
          </pre>
          <p><strong>Arguments</strong> - Values that are passed into functions (Also refered to as parameters)</p>
          <p>Parameters are the names in the paranthesis</p>
          <p>Arguments are the actual values passed in</p>
          <pre>
            <code>
              function square(val) {
                console.log(val * val);
              }

              square(4); &larr; 16
            </code>
          </pre>
          <p>You can also specify multiple arguments</p>
          <pre>
            <code>
              function area(length, width) {
                console.log(length * width);
              }

              square(9,2); &larr; 18
            </code>
          </pre>
          <p><strong>Return</strong> - Passes through the results of a function (Output)</p>
          <p>Every function returns something and if not specified JS will return undefined</p>
          <p>Return keyword stops the execution of a function</p>
          <pre>
            <code>
              function typeOne() {
                return "I am a function declaration";
              }

              typeOne(); &larr; runs the function
            </code>
          </pre>
          <pre>
            <code>
              var typeTwo = function() {
                return "I am a function expression";
              }

              typeTwo(); &larr; runs the function
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Loops</h4>
        </div>
        <div class="collapsible-body">
          <h5>WHILE</h5>
          <p><strong>while(someCondition)</strong> - Similar to an if statement, except it repeats a given code block instead of just running it once</p>
          <p><strong>for(init; condition; step)</strong> - Similar to an if statement, except it repeats a given code block instead of just running it once</p>
          <p><strong>Infinite Loops</strong> - Occur when the terminating condition never returns false</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Conditionals</h4>
        </div>
        <div class="collapsible-body">
          <h5>IF - ELSE IF - ELSE</h5>
          <p><strong>if</strong> - Evaluates a single expression to be either true or false - If true the code will be executed</p>
          <p><strong>else if</strong> - A secondary condition that follows an if statement - Functions just like an if statement, but has to actually come after one</p>
          <p><strong>else</strong> - Does not take an expression in parenthesis - Simply runs the code</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Logical Operators</h4>
        </div>
        <div class="collapsible-body">
          <h5 class="js-tables">AND, OR, and NOT</h5>
          <table>
            <thead>
              <tr>
                <th class="js-tables">Operator</th>
                <th class="js-tables">Name</th>
                <th class="js-tables">Example</th>
                <th class="js-tables">Result</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="js-tables">&&</td>
                <td class="js-tables">AND</td>
                <td class="js-tables">x &lt; 10 && x !== 5</td>
                <td class="js-tables">false</td>
              </tr>
              <tr>
                <td class="js-tables">||</td>
                <td class="js-tables">OR</td>
                <td class="js-tables">x &gt; 9 || x === 5</td>
                <td class="js-tables">true</td>
              </tr>
              <tr>
                <td class="js-tables">!</td>
                <td class="js-tables">NOT</td>
                <td class="js-tables">!(x === y)</td>
                <td class="js-tables">true</td>
              </tr>
            </tbody>
          </table>
          <br>
          <p class="js-tables"><em>Asume x = 5 and y = 9</em></p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Comparison Operators</h4>
        </div>
        <div class="collapsible-body">
          <h5 class="js-tables">Assume x = 15</h5>
          <table>
            <thead>
              <tr>
                <th class="js-tables">Operator</th>
                <th class="js-tables">Name</th>
                <th class="js-tables">Example</th>
                <th class="js-tables">Result</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="js-tables">&gt;</td>
                <td>Greater than</td>
                <td class="js-tables">x &gt; 20</td>
                <td>false</td>
              </tr>
              <tr>
                <td class="js-tables">&lt;</td>
                <td>Less than</td>
                <td class="js-tables">x &lt; -13</td>
                <td>false</td>
              </tr>
              <tr>
                <td class="js-tables">&gt;=</td>
                <td>Greater than or equal to</td>
                <td class="js-tables">x &gt;= 15</td>
                <td>true</td>
              </tr>
              <tr>
                <td class="js-tables">&lt;=</td>
                <td>Less than or equal to</td>
                <td class="js-tables">x &lt;= 200</td>
                <td>true</td>
              </tr>
              <tr>
                <td class="js-tables">==</td>
                <td>Equal to</td>
                <td class="js-tables">x == '15'</td>
                <td>true</td>
              </tr>
              <tr>
                <td class="js-tables">===</td>
                <td>Equal value and type</td>
                <td class="js-tables">x === '15'</td>
                <td>false</td>
              </tr>
              <tr>
                <td class="js-tables">!=</td>
                <td>Not equal to</td>
                <td class="js-tables">x != 'h'</td>
                <td>true</td>
              </tr>
              <tr>
                <td class="js-tables">!==</td>
                <td>Not equal to calue or equal to type</td>
                <td class="js-tables">x !== '15'</td>
                <td>true</td>
              </tr>
            </tbody>
          </table>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Methods</h4>
        </div>
        <div class="collapsible-body">
          <h5>Useful Built-In Methods</h5>
          <p><strong>alert()</strong> - Displays an alert box over the web page stating the content within the parenthesis</p>
          <p><strong>prompt()</strong> - Displays a prompt box over the web page and allows you to get input from a user ("type your prompt message inside the parenthesis") - Commonly paired with a variable</p>
          <p><strong>console.log()</strong> - Displays the content within the parenthesis in the console</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Primitive Datatypes</h4>
        </div>
        <div class="collapsible-body">
          <h5>5 Types:</h5>
          <p><strong>Numbers</strong> - Ex. 4, 9.3, -10</p>
          <p>- Perform mathmatical tasks with the standard order of operations - PEMDAS</p>
          <p>- Tricky Concept - % Modulo (Mod) - Remainder Operator - Divides the specified values and returns only the remainder value</p>
          <p><strong>Strings</strong> - Ex. "Hello World", "923"</p>
          <p>- You can concatenate two strings with the addition (+) operator</p>
          <p>- Use backslashes (\) to add characters to your string that are stated to be illegal syntax (backslash will not appear unless there are two in a row \\)</p>
          <p>- Every string has access to a length property - Which will retrieve a <em>number</em> specifying the total amount of characters in the string</p>
          <p>- Access indivual characters of the string with [] and an index value</p>
          <pre>
            <code>
              "hello"[4]    //"o"
            </code>
          </pre>
          <p><strong>Booleans</strong> - Ex. true, false</p>
          <p><strong>Null</strong> - Value we set in place that tells the javascript engine there is no value specified</p>
          <p><strong>Undefined</strong> - Value set in place by the javascript engine that specifies that a value has not been assigned</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="javascript">Varible</h4>
        </div>
        <div class="collapsible-body">
          <h5>Containers that store values</h5>
          <p>Variables can contain any of the 5 primative datatypes</p>
        </div>
      </li>
      <!-- ********************************************
      NOTE WORKFLOW
      ********************************************* -->
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Heroku</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Heroku Config</strong></p>
          <p><strong>1: "start": "node app.js"</strong> - make sure package.json has start script</p>
          <p><strong>2: app.listen(process,env.PORT, process.env.IP, callback;</strong> - make sure app.js file is configured like so</p>
          <p><strong>3: git init, git add, git commit</strong> - make sure git is set up on main project directory</p>
          <p><strong>4: heroku create [appName]</strong> - pass through login credentials</p>
          <p><strong>5: git push heroku master</strong> - this will push your code up to heroku</p>
          <hr>
          <hr>
          <h5>Other Heroku Commands</h5>
          <p><strong>heroku logs</strong> - use this command to view a log of any errors that occur with heroku (heroku logs is specific to each project folder)</p>
          <p><strong>heroku run [command]</strong> - allows you to connect and run your standard CLI commands on the heroku server and return the results</p>
          <hr>
          <p><strong>Environment Variables</strong> - are used to hide or obscure information inside your project - define with terminal in project folder using the following command (export KEY=value) - use process.env.KEY to access the value in project files</p>
          <p><strong>heroku config:set KEY=value</strong> - allows you to define your environment variable with heroku </p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">NPM</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Node Package Manager</strong> - is the default package manager for the JavaScript runtime environment Node.js</p>
          <hr>
          <hr>
          <h5>Common NPM Commands</h5>
          <p><strong>npm init</strong> - this command initializes our project by prompting questions which it uses to generate the package.json file</p>
          <p><strong>npm install [package] --save</strong> - installs package to current directories node_modules directory, and --save adds the package as a dependency in the package.json file</p>
          <p><strong>npm install [package]@latest --save</strong> - update a particular package as well as the package.json file</p>
          <hr>
          <hr>
          <h5>Commonly Used NPM Packages</h5>
          <ul>
            <li>express</li>
            <li>body-parser</li>
            <li>mongoose</li>
            <li></li>
          </ul>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Authentication</h4>
        </div>
        <div class="collapsible-body">
          <p><strong></strong> - </p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Modular Code</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>module.exports</strong> - acts like a return value in a function - when splitting our code into mutiple files we use module.exports to take the contents of one file and require('example') it in our other files</p>
          <p><strong>Seeds File</strong> - can be run to seed our DB with data - Useful for filling in information while building. (Common in error driven development - write code you want to work, get error, write code to get rid of error, etc...)</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Associations</h4>
        </div>
        <div class="collapsible-body">
          <p>Allows us to have multiple collections in our DB relate to one another</p>
          <hr>
          <hr>
          <h5>Types Of Associations</h5>
          <p><strong>one:one relationships</strong> - one entity is related to one of another entity - Ex. One Book: has One Author</p>
          <p><strong>one:many relationships</strong> - one entity relates to many other enities - Ex. One User: has Photos, Posts, and Likes</p>
          <p><strong>many:many relationships</strong> - Many entities are all interrelated - Ex. Students: Courses - Students can sign up for mutlple courses, and Courses can have many students enrolled</p>
          <hr>
          <p><strong>Embedding Data</strong> - where you embed the Schema of one entity as an array into the Schema of another</p>
          <pre>
            <code>
              // POST - title, content
              var postSchema = new mongoose.Schema({
                title: String,
                content: String,
              });
              var Post = mongoose.model('Post', postSchema);

              // USER - email, name
              var userSchema = new mongoose.Schema({
                email: String,
                name: String,
                posts: [postSchema],
              });
              var User = mongoose.model('User', userSchema);
            </code>
          </pre>
          <p><strong>Referencing Data</strong> - where you embed an array of IDs into a Schema that reference other entities by their ID</p>
          <pre>
            <code>
              // POST - title, content
              var postSchema = new mongoose.Schema({
                title: String,
                content: String,
              });
              var Post = mongoose.model('Post', postSchema);

              // USER - email, name
              var userSchema = new mongoose.Schema({
                email: String,
                name: String,
                posts: [
                  {
                    type: mongoose.Schema.Types.ObjectId,
                    ref: 'Post',
                  },
                ],
              }, { usePushEach: true });
              var User = mongoose.model('User', userSchema);
            </code>
          </pre>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="html">REST</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>REST</strong> - Representational State Transfer - it is a pattern for defining our routes - a convention/architecture for mapping HTTP routes to CRUD(Create-Read-Update-Delete) functionality</p>
          <hr>
          <hr>
          <h5>RESTful Routes</h5>
          <table class="responsive-table">
            <thead>
              <tr>
                <th><strong>NAME</strong></th>
                <th><strong>PATH/URL</strong></th>
                <th><strong>HTTP VERB</strong></th>
                <th><strong>DESC/PURPOSE</strong></th>
                <th><strong>MONGOOSE METHOD</strong></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><strong>INDEX</strong></td>
                <td>/dogs</td>
                <td>GET</td>
                <td>List all dogs</td>
                <td>Dog.find()</td>
              </tr>
              <tr class="rest-green">
                <td><strong>NEW</strong></td>
                <td>/dogs/new</td>
                <td>GET</td>
                <td>Show new dog form</td>
                <td>N/A (just renders a form)</td>
              </tr>
              <tr class="rest-green">
                <td><strong>CREATE</strong></td>
                <td>/dogs</td>
                <td>POST</td>
                <td>Create a new dog, then redirect somewhere</td>
                <td>Dog.create()</td>
              </tr>
              <tr class="rest-purple">
                <td><strong>SHOW</strong></td>
                <td>/dogs/:id</td>
                <td>GET</td>
                <td>Shows info about one specific dog</td>
                <td>Dog.findById()</td>
              </tr>
              <tr class="rest-yellow">
                <td><strong>EDIT</strong></td>
                <td>/dogs/:id/edit</td>
                <td>GET</td>
                <td>Show edit form for one dog</td>
                <td>Dog.findById()</td>
              </tr>
              <tr class="rest-yellow">
                <td><strong>UPDATE</strong></td>
                <td>/dogs/:id</td>
                <td>PUT(post)</td>
                <td>Update a particular dog, then redirect somewhere</td>
                <td>Dog.findByIdAndUpdate()</td>
              </tr>
              <tr class="rest-red">
                <td><strong>DESTROY</strong></td>
                <td>/dogs/:id</td>
                <td>DELETE(post)</td>
                <td>Delete a particular dog, then redirect somewhere</td>
                <td>Dog.findByIdAndRemove()</td>
              </tr>
            </tbody>
          </table>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">MongoDB</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>MongoDB</strong> - is a NoSQL(non-relational) database</p>
          <p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/">Mac Setup</a></p>
          <hr>
          <hr>
          <h5>Common Mongo Commands</h5>
          <p><strong>mongod</strong> - starts the mongo daemon - the mongod process is the primary database process that runs in the background on an individual server</p>
          <p><strong>mongo</strong> - opens up the mongo shell - like the js console it is good for testing and debugging</p>
          <p><strong>help</strong> - will give us a list of features that we can use to interact with mongo</p>
          <p><strong>show dbs</strong> - show database names</p>
          <p><strong>use [db name]</strong> - will let us access or create a db if the specified db name does not exist</p>
          <p><strong>show collections</strong> - will display all the collections in a given db - like <em>use</em> you can access a collection or create one if it does not exist with one command (see below)</p>
          <p><strong>CRUD(not a command more of an ideology)</strong> - stands for: Create - Read - Update - Delete(Destroy)</p>
          <p><strong>insert()</strong> - passes the specified data into a given collection</p>
          <pre>
            <code>
              // db refers to the current database your in
              // .dogs is the collection (it will create
              // the dogs collection if it doesn't already exist)
              // .insert() is adding info to the dogs collection

              db.dogs.insert({ name: 'Moose', breed: 'Pug' })
            </code>
          </pre>
          <p><strong>find()</strong> - allows you to retrieve information out of a collection - you can narrow down your results by specifying info inside the parenthesis</p>
          <p><strong>update()</strong> - takes two params: the selector and the update</p>
          <pre>
            <code>
              // $set: - allows us to update and add new info
              // without overwritting everything else stored
              // in the selected item
              db.dogs.update({name: 'Moose'}, {$set: {breed: 'Monster', color: 'Fawn'}})
            </code>
          </pre>
          <p><strong>remove()</strong> - allows you to remove items from a given collection</p>
          <p><strong>db.collection.drop()</strong> - replace collection with the name of a specific collection to delete all the existing items in the collection</p>
          <hr>
          <hr>
          <h5>Mongoose</h5>
          <p>ODM: Object Data Mapper - Tool that helps us interact with MongoDB inside our JS files</p>
          <p>Essentially you can write JS that can interacts with your database</p>
          <p><strong>Schema</strong> - the basic plan or structure of what a particular collection looks like</p>
          <p><strong>Model</strong> - where you take your schema and compile it into a model that returns an object with available methods (convention is to have a Capitalized variable name)</p>
          <hr>
          <hr>
          <h5>Common Mongoose Methods</h5>
          <p><strong>findById(id, callback(err, data))</strong> - Allows you to retrieve information on a specific item from your DB by it's id</p>
          <p><strong>findByIdAndUpdate(id, newData, callback(err, data))</strong> - Allows you to retrieve information on a specific item from your DB by it's id and update the content</p>
          <p><strong>findByIdAndRemove(id, callback(err)</strong> - Allows you to retrieve information on a specific item from your DB by it's id and delete the content</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Databases</h4>
        </div>
        <div class="collapsible-body">
          <p><strong>Database</strong> - is a collection of information/data that has an interface to which we can write code to interact with the stored data</p>
          <p><strong>SQL(relational)</strong> - tabular/flat databases - a table must be defined - you must have multiple tables if you want to relate information - often using id's and join tables to do so</p>
          <p><strong>NoSQL(non-relational)</strong> - non-tabular/information can be nested - don't have tables - more flexible - data looks like js objects</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Terminal/Command Line</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Commands</h5>
          <p><strong>Generic Syntax</strong> - command -options(or -flag) param1 param2 ...</p>
          <p><strong>man [command]</strong> - Lets you view the manual for the specified command</p>
          <p><strong>cd</strong> - Brings you straight to the home directory</p>
          <p><strong>cd [folder]</strong> - Changes to the directory of the specified folder</p>
          <p><strong>cd ..</strong> - Brings you back one directory</p>
          <p><strong>ls</strong> - Lists all the segments(files and folders) in your current directory</p>
          <p><strong>ls -a</strong> - Lists all the segments(files and folders) in your current directory including hidden files</p>
          <p><strong>pwd</strong> - Print Working Directory (display path of the current folder)</p>
          <p><strong>mkdir [newDirName]</strong> - Creates the specified directory</p>
          <p><strong>touch [filename,path]</strong> - Creates an empty file if one does not exist - Updates file access & modification timestamps</p>
          <p><strong>open [file, folder, url]</strong> - Opens files, folders, & URLs (as if you double clicked it)</p>
          <p><strong>open .</strong> - Opens your current working directory in a finder window</p>
          <p><strong>open . -a [application name]</strong> - Opens your current working directory in the specified application</p>
          <p><strong>mv [demo1.txt demo2.txt] or [example.txt ../new-example-directory]</strong> - Renames a file or moves it to a new location</p>
          <p><strong>trash [directory,file]</strong> - Custom setup that moves directories or files to the trash rather than deleting</p>
          <p><strong>clear</strong> - Clears the screen, but allows you to scroll up and view previous commands</p>
          <p><strong>Ctrl + U</strong> - Clear typed line to the beginning</p>
          <p><strong>Cmd + A</strong> - Go to the beginning of the line your currently typing on</p>
          <p><strong>Cmd + E</strong> - Go to the end of the line your currently typing on</p>
          <p><strong>Cmd + &rarr;</strong> - Move cursor one character forward</p>
          <p><strong>Cmd + &larr;</strong> - Move cursor one character backwards</p>
          <p><strong>Tab</strong> - Auto-complete files and folder names</p>
          <p><strong>Ctrl + C</strong> - Exit</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Git</h4>
        </div>
        <div class="collapsible-body">
          <h5>Add existing project to git hub</h5>
          <p><a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/" target="_blank">Click Here</a></p>
          <strong>$ git init</strong>

          <p><strong>$ git add .</strong> - # Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.</p>

          <p><strong>$ git commit -m "First commit"</strong> - # Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.</p>

          <p><strong>$ git remote add origin</strong>  - <em>remote repository URL</em>
          # Sets the new remote</p>
          <p><strong>git remote -v</strong> - # Verifies the new remote URL</p>

          <p><strong>$ git push -u origin master</strong> - # Pushes the changes in your local repository up to the remote repository you specified as the origin</p>
          <hr>
          <hr>
          <h5>Common Commands</h5>
          <p><strong>git status</strong></p>
          <p><strong>git add .</strong></p>
          <p><strong>git commit -m " "</strong></p>
          <p><strong>git loghist</strong></p>
          <p><strong>git pull origin master</strong></p>
          <p><strong>git push origin master</strong></p>
          <p><strong>git branch -a</strong></p>
          <p><strong>git checkout</strong> <em>branch name</em></p>
          <p><strong>git checkout -b</strong> <em>branch name</em></p>
          <p><strong>git merge</strong> <em>branch name</em></p>
          <p><strong>git commit --amend -m</strong><em> "new commit message"</em></p>
          <p><strong>q</strong> : will quit out of certain situations </p>
          <p><strong>git revert --no-commit 12345678..HEAD</strong> - this will revert everything from the HEAD back to the commit hash(safe and easy way to rollback to a previous state) - <strong>git commit -m "reverted back to 12345678"</strong></p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">ToDo / Atom Package</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Commands - Launch w/ ctrl + shift + T</h5>
          <p>FIXME</p>
          <p>TODO</p>
          <p>XXX</p>
          <p>IDEA</p>
          <p>HACK</p>
          <p>NOTE</p>
          <p>REVIEW</p>
          <p>BUG</p>
          <p>QUESTION</p>
          <p>COMBAK</p>
          <p>TEMP</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">API</h4>
        </div>
        <div class="collapsible-body">
          <h5>Application Program(ming) Interface</h5>
          <p>API's are interfaces for code/computers to talk to one another</p>
          <p><strong>Web API's</strong> - generally communicate via HTTP</p>
          <p><strong><a href="https://www.programmableweb.com/" target="_blank">ProgrammableWeb</a></strong> - is a great API Directory</p>
          <hr>
          <hr>
          <h5>Data Formats</h5>
          <p>When we use the interenet, we make HTTP requests and get HTML back</p>
          <p>API's dont need the structure provided by HTML, and use simpler data formats like <em>XML</em> and <em>JSON</em> - both specifying key value pairs</p>
          <p><strong>XML</strong> - Extended Markup Language is syntacticly similar to HTML, but it does not describe presentation like HTML</p>
          <pre>
            <code>
              &lt;person&gt;
              &lt;age&gt;25&lt;/age&gt;
              &lt;name&gt;Aaron&lt;/name&gt;
              &lt;city&gt;Huntington&lt;/city&gt;
              &lt;/person&gt;
            </code>
          </pre>
          <p><strong>JSON</strong> - Javascript Object Notation looks exactly like js objects, but everything is a string</p>
          <pre>
            <code>
              {
                'person': {
                  'age': '25',
                  'name': 'Aaron',
                  'city': 'Huntington'
                }
              }
            </code>
          </pre>
          <p><strong>JSON.parse(body)</strong> - allows us to take the JSON string (that looks like a js object) and parse it into a js object (the body argument in the example is specific to the npm <em>request</em> package)</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Backend</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Terminology</h5>
          <p><strong>get route</strong> - is for retrieving information</p>
          <p><strong>post route</strong> - is for sending new data to be added to the db or to be used on the server</p>
          <p>Asks the server to accept/store data which is enclosed in the body of the request (use body-parser package to take the POST request body and parse it into a js object)</p>
          <p><strong>Routing</strong> - establishes the request and response for a given path</p>
          <p><strong>Route Parameters || (Route Variables || Path Variables)</strong> - instead of creating routes for every possible path name</p>
          <p>ex. - <em>app.get(/r</em><strong>/:routeParameters</strong><em>/comments</em><strong>/:moreParameters</strong><strong>/:lastParameter</strong><em>)</em></p>
          <p><strong>req.params</strong> - lets you view and/or retrieve the route parameters of the request (can be stored into variable and used to make dynamic webpages)</p>
          <pre>
            <code>
              app.get('/speak/:animal', function(req, res) {
                var sounds = {
                  pig: 'Oink',
                  cow: 'Moo',
                  dog: 'Woof Woof',
                  cat: 'Meow',
                  goldfish: '...',
                }
                var animal = req.params.animal.toLowerCase();
                var sound = sounds[animal];

                res.send('The ' + animal.toUpperCase() + ' says ' + sound);
              });
            </code>
          </pre>
          <p><strong>*</strong> - when a star is used in a route definition it will match any request that comes in (this is why the order of routes is important) - The star is useful for catching requests that have not been established</p>
          <p><strong>res.render()</strong> - a method that lives on the response object that renders dynamic html files also known as templates (lets you send back the contents of a file) - express automatically looks in the <em>views directory</em></p>
          <p><strong>res.redirect()</strong> - a method that lives on the response object that takes a url and triggers the route again to run all the code within the specified url's route</p>
          <p><strong>.ejs</strong> - file type that stands for embedded javascript (what enables us to have dynamic templates)</p>
          <p><strong>ejs tags or brackets</strong> - are needed to embed js into html</p>
          <p><strong>&lt;%= js %&gt;</strong> - with the equal will sign will return the value into your html</p>
          <p><strong>&lt;% js %&gt;</strong> - without the equal sign is used for adding logic (loops, conditionals, and control flow) - will basically just run the code</p>
          <p><strong>Partials</strong> - files/templates we can include in other templates (useful for templating the standard html boilerplate with any links to stylesheets and script tags) - (sometimes folder is called layouts)</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Atom Commands</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Commands</h5>
          <p><strong>Cmd + ,</strong> - Opens the Preferences/Settings view</p>
          <p><strong>Cmd + Shift + D</strong> - Duplicates the entire line of the current cursor position</p>
          <p><strong>Cmd + Ctrl + &uarr;</strong> - Moves the contents of the current cursor position up one line</p>
          <p><strong>Cmd + Ctrl + &darr;</strong> - Moves the contents of the current cursor position down one line</p>
          <p><strong>Cmd + [</strong> - Indents the contents of the current cursor position to the left</p>
          <p><strong>Cmd + ]</strong> - Indents the contents of the current cursor position to the right</p>
          <p><strong>Cmd + L</strong> - Selects the entire line of the cursor's current position</p>
          <p><strong>Ctrl + Shift + L</strong> - Select grammar</p>
          <p><strong>Ctrl + shift + K</strong> - Deletes the current line</p>
          <p><strong>Ctrl + shift + F</strong> - Advance search and replace options</p>
          <p><strong>Ctrl + G</strong> - Opens the Go To Line panel</p>
          <p><strong>Cmd + Ctrl + G</strong> - This shortcut is similar to (Cmd + d) but it selects all the matching words at once [not one at a time]</p>
          <p><strong>Ctrl + `</strong> - Opens a terminal window right in Atom</p>
          <p><strong>Cmd + Shift + C</strong> - Opens custom color selector tool</p>
          <p><strong>Cmd + Option + &larr;</strong> - Toggles left through all currently opened files</p>
          <p><strong>Cmd + Option + &rarr;</strong> - Toggles right through all currently opened files</p>
          <p><strong>Option + &larr;</strong> - Skips left one word at a time (also handy to hold shift when highlighting)</p>
          <p><strong>Option + &rarr;</strong> - Skips left one word at a time (also handy to hold shift when highlighting)</p>
          <p><strong>Ctrl + Option + L</strong> - Launch Atom live server</p>
          <p><strong>Ctrl + Option + Q</strong> - Quit Atom live server</p>
          <p><strong>Cmd + Click</strong> - For multiple cursors (esc key when done)</p>
          <p><strong>Option + Shift + W</strong> - Highlight selection first, then use this command to wrap in new tbd tags</p>
          <p><strong>Cmd + /</strong> - Toggles the selected text into a comment of the current language type</p>
          <p><strong>Cmd + \</strong> - Toggles Atom's file Tree View</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Alfred Commands</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Commands</h5>
          <p><strong>Double Tap Cmd</strong> - This will initiate the program</p>
          <p><strong>Cmd + Enter</strong> - Search the web for whatever was typed in the prompt</p>
          <p><strong>Spell [word]</strong> - Start typing how you think a word is spelled - Select the correctly spelt word - The word will automatically be copied to your clipboard - Ready to paste anywhere</p>
          <p><strong>Define [word]</strong> - Very handy quick lookup dictionary</p>
          <p><strong>[File or Folder]</strong> - Will search you computer for the specified file or folder</p>
          <p><strong>[Math]</strong> - Built-In calculator</p>
        </div>
      </li>
      <li>
        <div class="collapsible-header">
          <h4 class="workflow">Cloud 9</h4>
        </div>
        <div class="collapsible-body">
          <h5>Common Commands</h5>
          <p><strong>Alt + S</strong> - Toggle between Terminal and Text Editor</p>
          <p><strong>^ + N</strong> - Delete this key binding for New File so you navigate with this command</p>
          <p><strong>^ + P</strong> - Delete this key binding for Jump To Matching Element so you navigate with this command</p>
          <p><strong>c9 open (fileName)</strong> - Open files from straight from the terminal (I first ran the following code) - npm install -g c9</p>
          <p><strong>Ctrl + esc</strong> - open and close bottom terminal pane</p>
        </div>
      </li>
    </ul> <!-- Main UL -->

  </div> <!-- Main Reference Div -->
</div> <!-- Container Div -->

<script src="js/jquery-3.2.1.min.js" charset="utf-8"></script>
<script src="js/materialize.min.js"></script>
<script src="js/list.js" charset="utf-8"></script>
<script src="js/Greetr.js" charset="utf-8"></script>
<script src="js/casy.js" charset="utf-8"></script>

</body>
</html>

  <!-- TODO: LEFT OFF

  The Advance Web Development Bootcamp
  Folder: 06
  Video: 66

  -->

<!-- NOTE: STYLE GUIDE
-PUT THIS SOMEWHERE-
http://codeguide.co/ -->
